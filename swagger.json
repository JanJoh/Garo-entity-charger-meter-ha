{"swagger": "2.0", "info": {"description": "Swagger API definition\n", "version": "1.0.0", "title": "Swagger API"}, "basePath": "/", "schemes": ["http", "https"], "paths": {"/netconf/wifi-confirm": {"put": {"description": "This end-point allows to confirm the current Wi-Fi settings, this will verify                      the Wi-Fi client connection and shutdown the EVSE Wi-Fi access point.", "tags": ["Netconf"], "responses": {"200": {"description": "Command successful."}, "502": {"description": "Could not connect to requested network."}}}}, "/netconf/wifi-connect": {"put": {"description": "This end-point allows to try to connect to a wireless network with a certain ssid and pre-shared key.", "parameters": [{"in": "formData", "name": "ssid", "type": "string"}, {"in": "formData", "name": "psk", "type": "string"}, {"in": "formData", "name": "timeout", "type": "integer"}], "tags": ["Netconf"], "responses": {"200": {"description": "Connection accepted."}, "400": {"description": "Value out of range."}, "500": {"description": "Internal server error."}, "502": {"description": "Could not connect to requested network."}, "511": {"description": "Could not connect due to incorrect key."}}}}, "/netconf/wifi-available-networks": {"get": {"description": "This end-point lists available Wi-Fi networks.", "tags": ["Netconf"], "produces": ["application/json"], "responses": {"200": {"description": "Return a list of available networks in json format."}}}}, "/netconf/network-interface": {"get": {"description": "This end-point returns the interface used for the upstream connection.", "tags": ["Netconf"], "produces": ["application/json"], "responses": {"200": {"description": "Return the network interface name in json format."}}}}, "/netconf/connection-status": {"get": {"description": "This end-point shows network connection status.\nIf interface_name is not specified, the active interface will be used.", "parameters": [{"in": "query", "name": "interface_name", "type": "string"}], "tags": ["Netconf"], "produces": ["application/json"], "responses": {"200": {"description": "Return connected network status information in json format"}, "400": {"description": "Value out of range."}}}}, "/netconf/csms-connection-status": {"get": {"description": "This end-point returns CSMS connection status and any available error information if not connected.", "tags": ["Netconf"], "produces": ["application/json"], "responses": {"200": {"description": "Return CSMS connection status information in json format."}}}}, "/certs/set-unit-cert": {"post": {"description": "This end-point allows to set the ssl certificate.", "parameters": [{"in": "formData", "name": "cert", "type": "file"}], "tags": ["Certs"], "produces": ["application/json"], "responses": {"200": {"description": "Certificate updated correctly."}, "400": {"description": "File not found or incorrect file found"}, "500": {"description": "Something went wrong when updating the certificate."}}}}, "/config/config-parameter": {"get": {"description": "This end-point allows to lookup configuration parameters.\n* If group is null and parameter is null, Returns a list of available groups.\n* If group is specified and parameter is null, Returns a list of the parameters available in group.\n* If group and parameter is specified, Returns the specified configuration parameter value.", "parameters": [{"in": "query", "name": "group", "type": "string"}, {"in": "query", "name": "parameter", "type": "string"}], "tags": ["Config"], "produces": ["application/json"], "responses": {"200": {"description": "Return the configuration information in json format."}}}, "put": {"description": "This end-point allows to set configuration parameters.\n* If any of group or parameter is null, Returns Error Code.\n* If group and parameter are specified and value is null,                        Sets the parameter to empty and returns the previous parameter value.\n* If group, parameter and value are specified,                        sets the new parameter value and returns the previous value of the specified configuration parameter.\nOnly ReadWrite or WriteOnly parameters may be set, unless root password is also given.", "parameters": [{"in": "formData", "name": "group", "type": "string"}, {"in": "formData", "name": "parameter", "type": "string"}, {"in": "formData", "name": "value", "type": "string"}, {"in": "formData", "name": "password", "type": "string", "format": "password"}], "tags": ["Config"], "produces": ["application/json"], "responses": {"200": {"description": "Return the previous configuration information in json format."}, "400": {"description": "Return the sent configuration information in json format."}}}, "delete": {"description": "This end-point allows to delete a configuration parameter.\nThe existing value is returned. Only ReadWrite or WriteOnly parameters may be deleted, unless root password is also given.", "parameters": [{"in": "formData", "name": "group", "type": "string"}, {"in": "formData", "name": "parameter", "type": "string"}, {"in": "formData", "name": "password", "type": "string", "format": "password"}], "tags": ["Config"], "produces": ["application/json"], "responses": {"200": {"description": "Return the previous configuration information in json format."}, "400": {"description": "Return the sent configuration information in json format."}}}}, "/factory/config-parameter": {"get": {"description": "This end-point allows to lookup configuration parameters.\n* If group is null and parameter is null, Returns a list of available groups.\n* If group is specified and parameter is null, Returns a list of the parameters available in group.\n* If group and parameter is specified, Returns the specified configuration parameter value.", "parameters": [{"in": "query", "name": "group", "type": "string"}, {"in": "query", "name": "parameter", "type": "string"}], "tags": ["Config"], "produces": ["application/json"], "responses": {"200": {"description": "Return the configuration information in json format."}}}, "put": {"description": "This end-point allows to set configuration parameters.\n* If any of group or parameter is null, Returns Error Code.\n* If group and parameter are specified and value is null,                        Sets the parameter to empty and returns the previous parameter value.\n* If group, parameter and value are specified,                        sets the new parameter value and returns the previous value of the specified configuration parameter.\nOnly ReadWrite or WriteOnly parameters may be set, unless root password is also given.", "parameters": [{"in": "formData", "name": "group", "type": "string"}, {"in": "formData", "name": "parameter", "type": "string"}, {"in": "formData", "name": "value", "type": "string"}, {"in": "formData", "name": "password", "type": "string", "format": "password"}], "tags": ["Config"], "produces": ["application/json"], "responses": {"200": {"description": "Return the previous configuration information in json format."}, "400": {"description": "Return the sent configuration information in json format."}}}, "delete": {"description": "This end-point allows to delete a configuration parameter.\nThe existing value is returned. Only ReadWrite or WriteOnly parameters may be deleted, unless root password is also given.", "parameters": [{"in": "formData", "name": "group", "type": "string"}, {"in": "formData", "name": "parameter", "type": "string"}, {"in": "formData", "name": "password", "type": "string", "format": "password"}], "tags": ["Config"], "produces": ["application/json"], "responses": {"200": {"description": "Return the previous configuration information in json format."}, "400": {"description": "Return the sent configuration information in json format."}}}}, "/config/device-id": {"get": {"description": "This end-point allows to lookup the device ID.", "tags": ["Config"], "produces": ["application/json"], "responses": {"200": {"description": "Return the device id in json format."}}}}, "/config/unit-id": {"get": {"description": "This end-point allows to lookup the unit ID.", "tags": ["Config"], "produces": ["application/json"], "responses": {"200": {"description": "Return the unit id in json format."}}}}, "/config/firmware-version": {"get": {"description": "This end-point allows to lookup the firmware version.", "tags": ["Config"], "produces": ["application/json"], "responses": {"200": {"description": "Return the firmware version in json format."}}}}, "/command/set-time": {"put": {"description": "Set system date in ISO 8601 format.", "parameters": [{"in": "formData", "name": "time", "type": "date-time"}], "tags": ["Command"], "responses": {"200": {"description": "Time set, ntp sync disabled."}, "400": {"description": "Time could not be set."}}}}, "/command/reset": {"put": {"description": "This end-point allows to send reset to the device.\n* If parameter is null, Returns Error Code.", "parameters": [{"in": "formData", "name": "parameter", "description": "Soft or Hard", "type": "string"}], "tags": ["Command"], "produces": ["application/json"], "responses": {"200": {"description": "Return accepted command."}, "400": {"description": "Return rejected command."}}}}, "/command/factory-reset": {"put": {"description": "Perform a factory reset and restart", "tags": ["Command"], "produces": ["text/plain"], "responses": {"200": {"description": "Factory reset performed"}}}}, "/command/ping": {"put": {"description": "This end-point allows pinging another host", "parameters": [{"in": "formData", "name": "host", "description": "The destination to ping", "type": "string"}, {"in": "formData", "name": "timeout", "description": "Timeout in seconds", "type": "string"}, {"in": "formData", "name": "count", "description": "Number of packets to send", "type": "string"}, {"in": "formData", "name": "interface", "description": "Interface address or name (br0, wlan0, wlan0_ap, wlan0_mesh, ppp0, plc0)", "type": "string"}], "tags": ["Command"], "produces": ["text/plain"], "responses": {"200": {"description": "Return accepted command."}, "400": {"description": "Return rejected command."}}}}, "/command/firmware-update": {"put": {"description": "This end-point allows to perform a firmware update. If signing_certificate and signature are provided, a signed firmware update is done. signing_certificate should be in PEM format (BEGIN/END markers). signature should be in Base64 format.", "parameters": [{"in": "formData", "name": "update_url", "type": "string"}, {"in": "formData", "name": "signing_certificate", "type": "string"}, {"in": "formData", "name": "signature", "type": "string"}], "tags": ["Command"], "produces": ["text/plain"], "responses": {"200": {"description": "Firmware updated correctly."}, "400": {"description": "File not found or incorrect file found."}, "500": {"description": "Something went wrong when updating the firmware."}}}}, "/command/test-mode": {"put": {"description": "Set HW test mode enabled; 1 enabled, 0 disabled.", "parameters": [{"in": "formData", "name": "value", "type": "integer"}], "tags": ["Command"]}}, "/hal/relay-control": {"put": {"description": "This end-point allows activating specific relays.\n* empty, deactivate all relays\n* list of relays to activate, 0 through 33, e.g. \"0,11,22,33\".\nRelay 10 is not allowed in combination with any other relay.", "parameters": [{"in": "formData", "name": "relay_configuration", "type": "string"}], "tags": ["HAL"], "responses": {"200": {"description": "Return accepted command."}, "400": {"description": "Return rejected command."}}}}, "/hal/button": {"get": {"description": "This end-point returns the current button position; 1 unpressed, 0 pressed.", "tags": ["HAL"], "produces": ["application/json"], "responses": {"200": {"description": "Return the current button position in json format."}}}}, "/hal/led-color": {"put": {"description": "Set led color for specific segment(s).", "parameters": [{"in": "formData", "name": "segments", "type": "integer", "description": "segment(s) (1-5), e.g. \"1,2,3\""}, {"in": "formData", "name": "rgb_color", "type": "string", "description": "rgb value (0-255), e.g. \"33,44,55\""}], "tags": ["HAL"]}}, "/hal/adc": {"get": {"description": "This end-point returns the current ADC readings.", "tags": ["HAL"], "produces": ["application/json"], "responses": {"200": {"description": "Return the current ADC readings in json format."}}}}, "/hal/gpio-direction": {"put": {"description": "This end-point sets the direction ('in' or 'out') of the selected GPIO.", "parameters": [{"in": "formData", "name": "gpio_name", "type": "string"}, {"in": "formData", "name": "direction", "type": "string"}], "tags": ["HAL"], "responses": {"200": {"description": "Command succeeded."}, "400": {"description": "Command failed, check gpio name or direction."}}}}, "/hal/gpio": {"get": {"description": "This end-point returns the current value of the selected GPIO.", "parameters": [{"in": "query", "name": "gpio_name", "type": "string"}], "tags": ["HAL"], "produces": ["application/json"], "responses": {"200": {"description": "Command succeeded, return the current GPIO value in json format."}, "400": {"description": "Command failed, check gpio name."}}}, "put": {"description": "This end-point sets the selected GPIO to the specified value.", "tags": ["HAL"], "parameters": [{"in": "formData", "name": "gpio_name", "type": "string"}, {"in": "formData", "name": "value", "type": "integer"}], "responses": {"200": {"description": "Command accepted."}, "400": {"description": "Command failed."}}}}, "/hal/output": {"get": {"description": "Return never ending Hardware Abstraction Layer event stream", "tags": ["HAL"], "produces": ["text/plain"]}}, "/status/temperatures": {"get": {"description": "Get Baseboard and CPU temperature values.", "tags": ["Status"], "produces": ["application/json"], "responses": {"200": {"description": "Return the current temperature values."}}}}, "/status/energy-meter": {"get": {"description": "Get values from active energy meter.", "tags": ["Status"], "produces": ["application/json"], "responses": {"200": {"description": "Return the current energy meter values                     in json format. Before a valid answer from the                     energy meter is recived a empty list is returned."}}}}, "/status/energy-meter-ocmf-xml": {"get": {"description": "Get Transparenzsoftware XML with last EM OCMF string", "tags": ["Status"], "produces": ["text/plain"], "responses": {"200": {"description": "Success"}, "502": {"description": "No OCMF string available"}}}}, "/status/energy-meter-pub-key": {"get": {"description": "Get public key of energy meter", "tags": ["Status"], "produces": ["text/plain"], "responses": {"200": {"description": "Public key, also indicating OCMF feature is OK"}, "502": {"description": "No public key or OCMF available"}}}}, "/netconf/modem-connect": {"put": {"description": "This end-point allows to try to connect to a LTE network", "parameters": [{"in": "formData", "name": "apn", "type": "string"}, {"in": "formData", "name": "pin", "type": "string"}, {"in": "formData", "name": "timeout", "type": "integer"}], "tags": ["Netconf"], "responses": {"200": {"description": "Connection accepted."}, "400": {"description": "Value out of range."}, "500": {"description": "Internal server error."}, "502": {"description": "Could not connect to requested network."}}}}, "/netconf/modem-disconnect": {"put": {"description": "This end-point disconnects from LTE network", "tags": ["Netconf"], "responses": {"200": {"description": "Disconnected."}, "500": {"description": "Internal server error."}}}}, "/command/lte-test-mode": {"put": {"description": "This end-point puts the LTE modem in test mode; 1 enabled, 0 disabled.", "tags": ["Command"], "parameters": [{"in": "formData", "name": "value", "type": "integer"}], "produces": ["application/json"], "responses": {"200": {"description": "Command succeeded. Return the command output in json format."}, "400": {"description": "Command failed. Return the command output in json format."}}}}, "/command/lte-rx-test": {"put": {"description": "This end-point starts a LTE modem RX test on the provided band and channel.\nE.g. band='LTE BAND1', channel=300.", "tags": ["Command"], "parameters": [{"in": "formData", "name": "band", "type": "string"}, {"in": "formData", "name": "channel", "type": "integer"}], "produces": ["application/json"], "responses": {"200": {"description": "Command succeeded. Return the command output in json format."}, "400": {"description": "Command failed. Return the command output in json format."}}}}, "/command/lte-tx-test": {"put": {"description": "This end-point enables or disables a LTE modem TX test on the provided band and channel.\nE.g. band='LTE BAND1', channel=300, power=50, enable=1.", "tags": ["Command"], "parameters": [{"in": "formData", "name": "band", "type": "string"}, {"in": "formData", "name": "channel", "type": "integer"}, {"in": "formData", "name": "power_percent", "type": "integer"}, {"in": "formData", "name": "enable", "type": "integer"}], "produces": ["application/json"], "responses": {"200": {"description": "Command succeeded. Return the command output in json format."}, "400": {"description": "Command failed. Return the command output in json format."}}}}, "/command/lte-reset": {"put": {"description": "This end-point restarts the LTE modem.", "tags": ["Command"], "responses": {"200": {"description": "Command received."}}}}, "/plc/slac-evse": {"put": {"description": "Run the EVSE part of the PLC SLAC protocol, return json dict\n* session_aag is cumulative average attenuation (normally < 40), zero on error", "tags": ["PLC"], "parameters": [{"in": "formData", "name": "slac_end_point", "description": "slac_end_point default value is 'evse', option is 'ev'.", "type": "string"}], "produces": ["application/json"], "responses": {"200": {"description": "Return accepted command."}}}}, "/plc/device-status": {"get": {"description": "Return local PLC Device status attributes as json dict\n* firmware_version indicates the installed version\n* zero_cross is \"Unknown\", \"Not yet detected\", \"Detected\", or \"Missing\"", "tags": ["PLC"], "produces": ["application/json"], "responses": {"200": {"description": "Return accepted command."}}}}, "/hal/cp-level-max": {"get": {"description": "This end-point returns the max cp level.", "tags": ["HAL"], "produces": ["application/json"], "responses": {"200": {"description": "Return the current max cp level in json format."}}}}, "/hal/cp-level-min": {"get": {"description": "This end-point returns the min cp level.", "tags": ["HAL"], "produces": ["application/json"], "responses": {"200": {"description": "Return the current min cp level in json format."}}}}, "/hal/pp-level": {"get": {"description": "This end-point returns the pp level.", "tags": ["HAL"], "produces": ["application/json"], "responses": {"200": {"description": "Return the current pp level in json format."}}}}, "/hal/enable-input": {"get": {"description": "This end-point returns the enable input state; 1 enabled, 0 disabled.", "tags": ["HAL"], "produces": ["application/json"], "responses": {"200": {"description": "Return the current enable input state in json format."}}}, "put": {"description": "Set emulated HW input", "parameters": [{"in": "formData", "name": "value", "type": "string"}], "tags": ["HAL"], "produces": ["text/plain"]}}, "/hal/socket-lock": {"put": {"description": "Set socket lock locked position; 1 locked, 0 unlocked.", "parameters": [{"in": "formData", "name": "value", "type": "integer"}], "tags": ["HAL"]}, "get": {"description": "This end-point returns if the socket lock is locked, True/False.", "tags": ["HAL"], "produces": ["application/json"], "responses": {"200": {"description": "Return the current socket lock position in json format."}}}}, "/hal/buzzer": {"put": {"description": "Set buzzer enabled; 1 enabled, 0 disabled.", "parameters": [{"in": "formData", "name": "value", "type": "integer"}], "tags": ["HAL"]}}, "/hal/rfid-front": {"get": {"description": "Returns last read rfid-tag from front rfid-reader.", "tags": ["HAL"], "produces": ["application/json"], "responses": {"200": {"description": "Return tagged tag in json format. If no tag                     has been presented yet a empty tag is returned."}, "400": {"description": "If the device has no rfid-reader."}}}}, "/hal/cp-pwm-duty": {"put": {"description": "Set CP-signal PWM duty cycle in percent.", "parameters": [{"in": "formData", "name": "duty_percent", "type": "integer"}], "tags": ["HAL"]}}, "/hal/cp-pwm-enabled": {"put": {"description": "Set CP-signal PWM enabled; 1 enabled, 0 disabled.", "parameters": [{"in": "formData", "name": "value", "type": "integer"}], "tags": ["HAL"]}}, "/hal/pe-ctrl": {"put": {"description": "Set PE ctrl state; 1 enabled, 0 disabled.", "parameters": [{"in": "formData", "name": "value", "type": "integer"}], "tags": ["HAL"]}}, "/hal/pe-detect": {"get": {"description": "Returns pe-contactor-det.", "tags": ["HAL"], "produces": ["application/json"], "responses": {"200": {"description": "Retruns status for                     pe-contactor-det in json format."}, "400": {"description": "If the device does not have the hardware."}}}}, "/status/sim-info": {"get": {"description": "This end-point retrieves SIM-card information.", "tags": ["Status"], "produces": ["application/json"], "responses": {"200": {"description": "Command succeeded. Return the command output in json format."}, "400": {"description": "Command failed. Return the command output in json format."}}}}, "/status/charging-state": {"get": {"description": "This end-point returns the current charging state.", "tags": ["Status"], "produces": ["application/json"], "responses": {"200": {"description": "Return the current charging state in json format."}}}}, "/hal/dcsense-x6": {"put": {"description": "Set emulated HW input", "parameters": [{"in": "formData", "name": "value", "type": "string"}], "tags": ["HAL"], "produces": ["text/plain"]}}, "/hal/dcsense-x30": {"put": {"description": "Set emulated HW input", "parameters": [{"in": "formData", "name": "value", "type": "string"}], "tags": ["HAL"], "produces": ["text/plain"]}}, "/hal/adc-values": {"put": {"description": "Set emulated HW input", "parameters": [{"in": "formData", "name": "value", "type": "string"}], "tags": ["HAL"], "produces": ["text/plain"]}}, "/hal/slac-response": {"put": {"description": "Set emulated HW input", "parameters": [{"in": "formData", "name": "value", "type": "string"}], "tags": ["HAL"], "produces": ["text/plain"]}}, "/hal/socket-lock-override-locked": {"put": {"description": "Set emulated HW input", "parameters": [{"in": "formData", "name": "value", "type": "string"}], "tags": ["HAL"], "produces": ["text/plain"]}}, "/hal/socket-lock-override": {"put": {"description": "Set emulated HW input", "parameters": [{"in": "formData", "name": "value", "type": "string"}], "tags": ["HAL"], "produces": ["text/plain"]}}}}
